@model SimulationResults

@{
    ViewData["Title"] = "Simulation Results";
}
@functions {
    double SafeGetValue(List<double> list, int index)
    {
        return (index >= 0 && index < list.Count) ? list[index] : 0;
    }

    bool IsBlocked(int index, List<int> queueLengths, int capacity)
    {
        return index < queueLengths.Count && queueLengths[index] > capacity;
    }
}

@* Section For Calculating Average Results *@
<div class="container mt-5">
    <h2 class="text-center">Calculation Results</h2>

    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Metric</th>
                <th>Value</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Average number of customers in the system (L)</td>
                <td>@Model.L</td>
            </tr>
            <tr>
                <td>Average number of customers in the queue (Lq)</td>
                <td>@Model.Lq</td>
            </tr>
            <tr>
                <td>Average time a customer spends in the system (W)</td>
                <td>@Model.W</td>
            </tr>
            <tr>
                <td>Average time a customer spends in the queue (Wq)</td>
                <td>@Model.Wq</td>
            </tr>
        </tbody>
    </table>

    <a href="@Url.Action("Index", "Queue")" class="btn btn-primary">Back to Input</a>
</div>


@* Section For Simulation Results *@
<div class="container mt-5">
    <h2 class="text-center">Simulation Results</h2>

    <div class="card mt-4">
        <div class="card-header">
            <h4>Simulation Plot</h4>
        </div>
        <div class="card-body text-center">
            <img src="data:image/png;base64,@ViewBag.PlotImage" alt="Simulation Plot" />
        </div>
    </div>

    <div class="card mt-4">
        <div class="card-header">
            <h4>Simulation Data</h4>
        </div>
        <div class="card-body">
            @if (Model != null && Model.TimeEvents != null && Model.TimeEvents.Count > 0)
            {
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Person ID</th>
                            <th>Waiting Times</th>
                            <th>Waiting Times In Queue</th>
                            <th>Arrival Time</th>
                            <th>Start Service Time</th>
                            <th>Departure Time</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.Persons.Count; i++)
                        {
                            <tr>
                                <td>@(i + 1)</td>
                                @* <td>@(i < Model.QueueLengths.Count ? Model.QueueLengths[i] : "")</td> *@
                                <td>@(i < Model.WaitingTimes.Count ? Math.Round(Model.WaitingTimes[i], 5).ToString() : "")</td>
                                <td>@(i < Model.WaitingTimesInQueue.Count ? Math.Round(Model.WaitingTimesInQueue[i], 5).ToString() : "")</td>
                                <td>@Math.Round(Model.Persons[i].ArrivalTime, 5)</td>
                                <td>
                                    @if (IsBlocked(i, Model.QueueLengths, Model.Capacity.HasValue ? Model.Capacity.Value : int.MaxValue))
                                    {
                                        <span class="text-danger">Φ</span>
                                    }
                                    else
                                    {
                                        @Math.Round(Model.Persons[i].StartTime, 5)
                                    }
                                </td>
                                <td>
                                    @if (IsBlocked(i, Model.QueueLengths, Model.Capacity.HasValue ? Model.Capacity.Value : int.MaxValue))
                                    {
                                        <span class="text-danger">Φ</span>
                                    }
                                    else
                                    {
                                        @Math.Round(Model.Persons[i].DepartureTime, 5)
                                    }
                                </td>
                                <td>
                                    @if (IsBlocked(i, Model.QueueLengths, Model.Capacity.HasValue ? Model.Capacity.Value : int.MaxValue))
                                    {
                                        <span class="text-danger">Blocked</span>
                                    }
                                    else
                                    {
                                        <span class="text-success">Served</span>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>No simulation data available.</p>
            }
        </div>
    </div>
</div>
